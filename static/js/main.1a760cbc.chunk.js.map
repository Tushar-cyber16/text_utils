{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","mystyle","color","mode","backgroundColor","border","borderColor","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","Navbar","to","title","aria-label","aria-current","onClick","togglemode","role","htmlFor","TextForm","useState","text","settext","value","onChange","event","target","rows","disabled","length","newText","toUpperCase","showalert","toLowerCase","clip_text","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","join","filter","element","defaultProps","Alert","height","alert","words","lower","charAt","slice","capitalize","msg","data-bs-dismiss","App","setmode","setalert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1a760cbc.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function About(props) {\r\n\r\n    // const [mystyle, setmystyle]=useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white',\r\n    //     border: '1px solid white'\r\n    // });\r\n    // const [btntext, setbtntext] = useState(\"enable dark mode\");\r\n    // const togglerun = ()=>{\r\n    //  if(mystyle.color==='white')\r\n    //  {\r\n    //      setmystyle({\r\n          \r\n    //         color: 'black',\r\n    //         backgroundColor: 'white'\r\n    //      })\r\n    //      setbtntext(\"enable dark mode\");\r\n    //  }\r\n    //  else\r\n    //  {\r\n    //     setmystyle({\r\n    //         color: 'white',\r\n    //         backgroundColor: 'black',\r\n    //         border: '1px solid white'\r\n    //      })\r\n    //      setbtntext(\"enable light mode\");\r\n    //  }\r\n    // }\r\n    let mystyle={\r\n      color: props.mode==='dark'?'white':'black',\r\n      backgroundColor: props.mode==='dark'?'#423395':'white',\r\n      border: '2px solid',\r\n      borderColor: \"props.mode==='dark'?'white':'black'\"\r\n    }\r\n  return (\r\n    <div className=\"container my-2\" >\r\n        <h1 style={{color:props.mode==='dark'?'white':'black'}}>About Us</h1>\r\n      <div className=\"accordion my-2\" style={{color:props.mode==='dark'? '#423395':'white'}} id=\"accordionExample\" >\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n              style={mystyle}\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n              style={mystyle}\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n              style={mystyle}\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"container\">\r\n          <button type=\"button\" onClick={togglerun} className=\"btn btn-primary my-2\">{btntext}</button>\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link active\" to=\"/about\">ABOUT</Link>\r\n          </li>\r\n          \r\n        </ul>\r\n        {/* <form className=\"d-flex\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n        </form> */}\r\n      </div>\r\n      <div className={`form-check form-switch text-${props.mode==='dark'?'light':'dark'}`}>\r\n  <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" role=\"switch\" id=\"dark\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">enable dark mode</label>\r\n</div>\r\n    </div>\r\n  </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes={\r\n    title: PropTypes.string\r\n    // title: PropTypes.string.isRequired  it means u need to give title\r\n}\r\nNavbar.defaultProps = {\r\n    title:'enter title'\r\n}\r\n\r\n\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const [text, settext] = useState(\"\");\r\n  const onupclick = () => {\r\n    //  console.log(\"onupclick clicked\");\r\n    let newText = text.toUpperCase();\r\n    settext(newText);\r\n    props.showalert('text converted to uppercase','success');\r\n  };\r\n  const ondownclick = () => {\r\n    //  console.log(\"ondownclick clicked\");\r\n    let newText = text.toLowerCase();\r\n    settext(newText);\r\n    props.showalert('text converted to lowercase','success');\r\n  };\r\n  const onclearclick = () => {\r\n    //  console.log(\"clear text\");\r\n    let newText = \"\";\r\n    settext(newText);\r\n    props.showalert('text cleared','success');\r\n  };\r\n  const oncopyclick = () => {\r\n    //  console.log(\"copy text\");\r\n    let clip_text = document.getElementById(\"text-box\");\r\n    clip_text.select();\r\n    navigator.clipboard.writeText(clip_text.value);\r\n    document.getSelection().removeAllRanges();\r\n    props.showalert('text copied','success');\r\n  };\r\n  const onextraspaceclick = () => {\r\n    //  console.log(\"remove extra space\");\r\n    let clip_text = text.split(/[ ]+/);\r\n    settext(clip_text.join(\" \"));\r\n    props.showalert('extra spaces removed','success');\r\n  };\r\n  const onchange = (event) => {\r\n    // console.log(\"onchange\");\r\n    settext(event.target.value);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <h1 style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}>\r\n          {props.text}\r\n        </h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={onchange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"rgb(156 158 229)\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n            id=\"text-box\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={onupclick}>\r\n          Convert To Uppercase\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={ondownclick}>\r\n          Convert To lowercase\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={onclearclick}>\r\n          clear\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={oncopyclick}>\r\n          copy\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={onextraspaceclick}>\r\n          remove extra space\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-2\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h1>Your Text Summary</h1>\r\n        <p>\r\n          {text.split(/\\s+/).filter((element) => { return element.length!==0 }).length} words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").filter((element) => { return element.length!==0 }).length} minutes to read</p>\r\n        <h3>preview</h3>\r\n        <p>{text}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","\r\nimport React from 'react';\r\n\r\n\r\n function Alert(props) {\r\n\r\n    const capitalize = (words) => {\r\n        let lower=words.toLowerCase();\r\n        return (lower.charAt(0).toUpperCase() + lower.slice(1));\r\n    }\r\n    return (\r\n  <div style={{height:'50px'}}>\r\n  { props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalize(props.alert.type)} </strong>{props.alert.msg}\r\n  <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n</div>}\r\n</div>\r\n    );\r\n}\r\n\r\nexport default Alert;","import \"./App.css\";\nimport About from \"./components/About\";\nimport React, { useState } from \"react\";\n\nimport Navbar from \"./components/Navbar.js\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\nimport { BrowserRouter as Router, Routes, Route} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n  const [alert, setalert] = useState(null);\n\n  const showalert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 1000);\n  };\n  const togglemode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"#07125e\";\n      showalert(\"darkmode has been enabled\", \"success\");\n      document.title = \"TextUtils- dark mode\";\n    } else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showalert(\"lightmode has been enabled\", \"success\");\n      document.title = \"TextUtils- light mode\";\n    }\n  };\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextUtils\" mode={mode} togglemode={togglemode} />\n        {/* <Navbar/> */}\n        <Alert alert={alert} />\n        {/* <TextForm showalert={showalert} text=\"enter text to analyze\" mode={mode} /> */}\n        <div className=\"container\">\n          {/* <About/> */}\n          <Routes>\n            <Route exact path=\"/about\" element={<About mode={mode}/>}/>\n            <Route exact path=\"/\" element={<TextForm showalert={showalert} text=\"Enter Text To Analyze\" mode={mode} />}/>\n          </Routes>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}